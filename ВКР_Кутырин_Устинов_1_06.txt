      МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ
Федеральное государственное бюджетное образовательное учреждение высшего образования
"Кемеровский государственный университет"
Институт цифры
Кафедра цифровых технологий
     
    Выпускная квалификационная работа
      бакалаврская работа
     
      
    Информационная система "Оперативный мониторинг хода приемной кампании Кемеровского государственного университета"
    
    Кутырин Максим Вячеславович
    Устинов Алексей Павлович
         	
       направление подготовки 02.03.03 Математическое обеспечение и администрирование информационных систем
направленность (профиль) подготовки "Информационные системы и базы данных"
      
     
      Научный руководитель:
      
      канд. физ.-мат. наук, доцент
     
     Колесникова Т. Г.
         
         
         
     Работа защищена с оценками:
     
      Кутырин М.В.
     
     
     
      Протокол ГЭК №____ от " ___ "________ 2025 г.
         
         
         
     
      
      Устинов А. П.
     
     
     
      Протокол ГЭК №____ от " ___ "________ 2025 г.
         
         
         
     
      
         
     Секретарь ГЭК _______________________
     	(подпись)
     
Кемерово 2025
     

     ОГЛАВЛЕНИЕ
     ВВЕДЕНИЕ	6
     ГЛАВА 1. ОБЗОР СУЩЕСТВУЮЩИХ РЕШЕНИЙ.	9
     1.1 Анализ современных тенденций	9
     1.2 Анализ современных тенденций	10
     1.3 Обзор существующих аналогов	12
     1.3.1 Платформа KursHub	12
     1.3.2 Сервис ГдеКурс	13
     1.3.3 Платформа Aacademy Market	14
     1.3.4 Серивис CHECKROI	14
     1.4 Выводы по обзору существующих аналогов	15
     ГЛАВА 2. ПРОЕКТИРОВАНИЕ СИСТЕМЫ	17
     2.1 Архитектура системы	17
     2.2 Требования функционального характера	18
     2.3 Требования нефункционального характера. Требования к производительности	19
     2.3.1 Требования к безопасности	20
     2.3.2 Требования к восстановлению	20
     2.3.1 Требования к расширяемости	21
     2.4 Проектирование	22
     2.4.1 Диаграмма последовательности действий	22
     2.4.2 Диаграмма развертывания	27
     2.4.3 Диаграмма прецедентов	29
     2.4.4 Диаграмма классов	34
     ГЛАВА 3. РЕАЛИЗАЦИЯ СИСТЕМЫ	39
     3.1 Используемые технологии	39
     3.2 Реализация бекенд части	44
     3.3 Реализация парсеров	46
     3.3.1 Парсер Stepik	46
     3.3.2 Парсер SkillBox	46
     3.3.3 Парсер GeekBrains	47
     3.4 РЕАЛИЗАЦИЯ ФРОНТЕНД ЧАСТИ	48
     ГЛАВА 4. ТЕСТИРОВАНИЕ СИСТЕМЫ	53
     4.1 Функциональное тестирование	53
     4.2 Тестирование интерфейса	54
     4.3 Результаты тестирования	55
     Заключение	56
     СПИСОК ЛИТЕРАТУРЫ	57

     ВВЕДЕНИЕ
     В современном мире все больше и больше людей хотят раскрывать себя, показывать, что они из себя представляют, а не быть частью так называемой "серой массы", для этого они пробуют себя в самых разных сферах, начиная от дизайна карточек товаров на современных маркетплэйсах и готовкой национальных блюд австралии, заканчивая разработкой десктоп - приложений и управлением многотонной техникой. Для того, чтобы не тратить годы своей жизни на полноценное обучение дисциплинам, которые не факт что им понравятся, общество прибегает к курсам за помощью, чтобы окунуться в интересющую их сферу, попробовать и понять для себя: стоит ли им продолжать двигаться в том же направлении или стоит смениь траекторию? 
     Образовательные технологии тут играют ключевую роль. Однако в наше время опций стало слишком много и выбирать обучающую программу для себя это очень непростая задача. Существует множество платформ, предлогающих обучение по разным направлениям и с разным подходом к образовательному процессу. История онлайн-образования насчитывает уже не одно десятилетие, однако настоящий расцвет пришелся на 2010-е годы, когда технологический прогресс сделал доступным качественное видео и интерактивные материалы для миллионов пользоватилей. Первые образовательные платформы представляли собой простые наборы видеолекций без какой-либо обратной связи, но постепенно они эволюционировали в полноценные экосистемы с проверкой знаний, менторской поддержкой и возможностю получения сертификатов. 
     Особый интерес представляют российские платформы, такие как Skillbox, Stepik и GeekBrains, каждая из которых имеет свою уникальную историю и подход к обучению. Так, Stepik, основанный в 2013 году как платформа для создания и прохождения интерактивных курсов, изначально был ориентирован на академическую среду и программирование. В отличие от него, Skillbox, появившийся в 2016 году, сразу позиционировал себя как маркетплейс для креативных и цифровых профессий, делая акцент на практических навыках и трудоустройстве. GeekBrains, с другой стороны, начинал свой путь как ресурс исключительно для IT-специалистов, но со временем расширил свое предложение на смежные области. 
     В начале своего развития эти площадки предлагали курсы по отдельности, часто с единовременной оплатой за доступ. Однако с течением времени бизнес-модели эволюционировали в сторону подписок и комплексных программ обучения. Например, Skillbox одним из первых внедрил модель подписки, позволяющую получать доступ сразу к нескольким курсам, а GeekBrains активно развивал формат "профессий" - набор взаимосвязаных курсов, направленных на полное освоение определенной специальности. Stepik, в свою очередь, долгое время сохранял акцент на отдельных курсах, многие из которых оставались бесплатными, что способствовало привлечению широкой аудитории. 
     К 2020 году, особенно с наступлением пандемии, онлайн-образование стало испытывать настоящий бум. Количество доступных курсов выросло экспоненциально, что создало паррадоксальную ситуацию: чем больше становилось предложений, тем сложнее пользователям становилось найти именно то, что соответствует их потребностям и уровню подготовки. По данным иследований, более 60% потенциальных студентов тратят от двух до трех недель на выбор подходящего курса, отказываясь от обучения из-за так называемого "парадокса выбора" - когда множество опций вызывает когнитивную перегрузку и затрудняет принятие решения. 
     Эта проблемма особенно актуальна для новичков, которые не обладают достаточными знаниями для критической оценки качества предлагаемых курсов. Отсутствие единого стандарта и объективных критериев сравнения приводит к тому, что выбор часто основывается на субъективных факторах: яркости рекламной компании, личном отношении к бренду или случайных рекомендациях из социальных сетей. В результате человек может потратить значительные средства на курс, который не соответствует его ожиданиям или не дает необходимых знаний и навыков. 
     В такой ситуации возникает потребность в агрегаторе образовательных курсов - инструменте, который собирал бы информацию с различных платформ, систематизировал ее и предоставлял пользователем в удобном виде. Подобные сервисы уже существуют в других сферах - например, агрегаторы товаров, отелей или авиабилетов давно стали привычным способом поиска оптимальных предложений. Однако в сфере образования эта ниша остается относительно свободной, особенно если говарить о сервисах, ориентированных на российский рынок.
     	Целью данной работы является разработка приложения-агрегатора, которое позволит пользователям легко находить и сравнивать курсы с различных платформ в едином удобном интерфейсе.
     	Для достижения цели были поставлены следующие задачи:
* Анализ источников данных (платформы с курсами)
* Окончательный выбор платформ
* Разработка требований к ИС и ее проектирование
* Создание парсеров с индивидуальными подходамм для каждой платформы
* Написание логики бэкэнда для сбора нужных данных о курсах
* Разработка визуального стиля для фронтэнда
* Верстка страниц агрегатора, написание логики
* Связка бэкэнда с фронтэндом
     

     ГЛАВА 1. ОБЗОР СУЩЕСТВУЮЩИХ РЕШЕНИЙ.
     1.1 Анализ современных тенденций
     Современная образовательная среда претерпевает кардинальные изменения под воздействием цифровых технологий. Традиционные формы получения знаний постепенно дополняются и во многих случаях замещаются дистанционными образовательными программами. Данная трансформация обусловлена не только техническим прогрессом, но и изменившимися потребностями общества в гибких, доступных и персонализированных образовательных решениях.
     Платформы онлайн-обучения, такие как Coursera, edX, Udemy, Khan Academy, а также отечественные ресурсы вроде Stepik, Нетология и GeekBrains, формируют новую экосистему образования. Каждая из этих платформ обладает уникальными характеристиками: различными подходами к подаче материала, специфическими методиками оценки знаний, разнообразными форматами взаимодействия между преподавателями и учащимися. Такое многообразие, с одной стороны, предоставляет пользователям широкий выбор образовательных возможностей, а с другой - создает серьезные сложности в навигации по образовательному пространству.
     Проблема выбора подходящего образовательного контента усугубляется отсутствием единых стандартов представления информации о курсах. Различные платформы используют собственные системы категоризации, оценки сложности, временных рамок и стоимости обучения. Пользователь, стремящийся найти оптимальный курс, вынужден последовательно изучать множество ресурсов, тратя значительное время на сравнение предложений и анализ их соответствия своим потребностям.
     Особую актуальность приобретает задача агрегации образовательного контента в условиях растущего спроса на непрерывное профессиональное развитие. Современный специалист должен постоянно обновлять свои знания и навыки, адаптируясь к быстро меняющимся требованиям рынка труда. В таких условиях эффективный инструмент поиска и сравнения образовательных программ становится не просто удобством, а необходимым элементом профессиональной деятельности.
     Анализ пользовательского опыта взаимодействия с существующими образовательными платформами выявляет несколько ключевых проблемных областей. Первая связана с фрагментированностью информации - потенциальные учащиеся не имеют возможности получить целостное представление о доступных вариантах обучения в конкретной предметной области. Вторая касается сложности сравнения альтернатив - отсутствие унифицированных критериев оценки затрудняет принятие обоснованных решений. Третья проблема заключается в языковых и культурных барьерах - многие качественные образовательные ресурсы остаются недоступными для российских пользователей из-за отсутствия локализации.
     Решение указанных проблем требует создания интегрированной системы, способной аккумулировать информацию из различных источников, стандартизировать ее представление и предоставить пользователям удобные инструменты для поиска и сравнения образовательных возможностей. Такая система должна учитывать специфику российского образовательного рынка, включая предпочтения локальной аудитории в отношении языка, методик обучения и тематической направленности курсов.
     
     1.2 Анализ современных тенденций
     Развитие сферы онлайн-образования в последние годы характеризуется беспрецедентной динамикой. Глобальные социальные изменения, связанные с пандемией COVID-19, стали катализатором для массового перехода к дистанционным формам обучения. Однако этот процесс не следует рассматривать как временное явление - он отражает долгосрочные тенденции цифровой трансформации образования.
     Российский рынок онлайн-образования демонстрирует особенно интенсивный рост. По данным исследовательских агентств, количество пользователей, получающих дополнительное образование в цифровом формате, превысило 18 миллионов человек за последний год. Этот показатель значительно опережает количество людей, выбирающих традиционные формы обучения, что составляет около 12 миллионов человек. Экономические показатели также свидетельствуют о растущей значимости сегмента: совокупные расходы на онлайн-обучение достигли 226 миллиардов рублей, превысив затраты на офлайн-образование.
     Структура спроса на онлайн-образование отражает потребности современной экономики в высококвалифицированных специалистах. Наибольшей популярностью пользуются программы в области информационных технологий, цифрового маркетинга, финансового анализа и управления. Растет интерес к междисциплинарным курсам, объединяющим технические навыки с гуманитарными знаниями, что соответствует тенденции к формированию T-shaped специалистов.
     Мотивационные факторы выбора онлайн-обучения претерпевают эволюцию. Если первоначально основным преимуществом считалась более низкая стоимость по сравнению с традиционным образованием, то в настоящее время на первый план выходят вопросы гибкости и персонализации. Более половины участников опросов указывают на возможность самостоятельного планирования учебного процесса как ключевое достоинство цифрового формата. Значительная часть аудитории отмечает важность географической независимости - возможности получать качественное образование независимо от места проживания.
     Технологические инновации продолжают расширять возможности онлайн-образования. Внедрение интерактивных симуляторов, виртуальной и дополненной реальности, адаптивных систем оценки знаний создает новые форматы образовательного взаимодействия. Развитие технологий искусственного интеллекта открывает перспективы для создания персонализированных образовательных траекторий, учитывающих индивидуальные особенности обучающихся.
     Одновременно с техническим развитием происходит трансформация образовательных методологий. Традиционная модель передачи готовых знаний уступает место подходам, ориентированным на развитие критического мышления, творческих способностей и навыков самообучения. Растет значимость проектно-ориентированного обучения, когда теоретические знания сразу применяются для решения практических задач.
     Особенностью российского рынка является высокий спрос на локализованный контент. Несмотря на доступность международных образовательных ресурсов, значительная часть аудитории предпочитает курсы на русском языке, адаптированные к российским реалиям. Это создает возможности для развития отечественных образовательных платформ и формирования уникальных образовательных продуктов.
     1.3 Обзор существующих аналогов 
     Анализ российского рынка агрегаторов образовательных курсов выявляет несколько значимых проектов, каждый из которых представляет определенный подход к решению задачи консолидации образовательного контента. Рассмотрение этих платформ позволяет выявить успешные практики и ограничения существующих решений.
     1.3.1 Платформа KursHub
     KursHub представляет собой одну из наиболее развитых отечественных платформ агрегации образовательных курсов. Проект ориентирован преимущественно на российскую аудиторию и объединяет предложения как платных, так и бесплатных образовательных программ. Интерфейс платформы характеризуется интуитивной навигацией, позволяющей пользователям осуществлять поиск по основным параметрам: тематической направленности, ценовой категории, продолжительности обучения и уровню сложности.
     Функциональные возможности KursHub включают систему фильтрации курсов по различным критериям, возможность сохранения избранных программ и базовые инструменты сравнения предложений. Платформа предоставляет структурированную информацию о курсах, включая описание программы, сведения о преподавателях и отзывы участников. Однако детальный анализ контента показывает ограниченность базы данных международных курсов, что существенно снижает ценность ресурса для пользователей, заинтересованных в получении образования от ведущих мировых университетов и образовательных центров.
     Техническая реализация платформы демонстрирует стабильную работу основных функций, но отсутствие расширенных возможностей персонализации и рекомендательных систем ограничивает пользовательский опыт. Монетизация проекта осуществляется через партнерские программы с образовательными платформами, что может влиять на объективность представления информации о курсах.
     1.3.2 Сервис ГдеКурс
     ГдеКурс позиционирует себя как универсальный инструмент для поиска образовательных программ различной направленности. Платформа предлагает базовую функциональность сортировки и фильтрации курсов по стандартным параметрам: стоимости, длительности и тематическим категориям. Пользовательский интерфейс характеризуется минималистичным дизайном, что способствует простоте использования, но одновременно ограничивает возможности детального анализа предложений.
     Содержательная часть сервиса представлена преимущественно курсами российских образовательных платформ с незначительным включением международного контента. База данных остается относительно компактной по сравнению с общим объемом доступных образовательных ресурсов, что ограничивает полноту представления рынка. Отсутствие интеграции с API основных образовательных платформ приводит к проблемам актуальности информации и требует ручного обновления данных.
     Функциональные ограничения платформы включают отсутствие системы пользовательских рецензий, ограниченные возможности персонализации поиска и недостаточно развитую систему категоризации курсов. Эти факторы снижают эффективность использования ресурса для пользователей с специфическими образовательными потребностями.
     1.3.3 Платформа Aacademy Market
     Academy Market фокусируется на профессионально-ориентированном образовании, предлагая курсы, структурированные по профессиональным направлениям и конкретным навыкам. Отличительной особенностью платформы является попытка связать образовательные программы с актуальными требованиями рынка труда, что проявляется в категоризации курсов по профессиям и компетенциям.
     Интерфейс Academy Market предоставляет удобные инструменты для поиска курсов в рамках определенных профессиональных траекторий. Пользователи могут исследовать образовательные пути для конкретных специальностей, получая представление о необходимых навыках и доступных программах их развития. Однако фокус на профессиональном образовании приводит к недостаточному представлению курсов общекультурной и академической направленности.
     Ограничения платформы включают слабую интеграцию с международными образовательными ресурсами и недостаточно развитую систему фильтрации по техническим параметрам курсов. Отсутствие детальной информации о методиках преподавания и формах аттестации затрудняет принятие обоснованных решений о выборе образовательных программ.
     1.3.4 Серивис CHECKROI
     CheckROI представляет специализированный подход к агрегации образовательного контента с акцентом на оценке эффективности инвестиций в образование. Платформа концентрируется на курсах профессионального развития в области информационных технологий, бизнес-анализа и управления, предлагая инструменты для оценки потенциальной отдачи от образовательных программ.
     Уникальной особенностью CheckROI является система аналитики, позволяющая пользователям оценивать курсы не только по содержанию и качеству, но и по потенциальному влиянию на карьерные перспективы и доходы. Платформа интегрирует данные о рынке труда, зарплатных ожиданиях и востребованности навыков, предоставляя комплексную картину ценности образовательных инвестиций.
     Функциональность сервиса включает расширенную систему отзывов и оценок, позволяющую пользователям делиться опытом прохождения курсов и их влиянием на профессиональное развитие. Однако узкая специализация платформы существенно ограничивает ее применимость для широкой аудитории, заинтересованной в образовательных программах различной направленности.
     1.4 Выводы по обзору существующих аналогов  
     Анализ существующих решений в области агрегации образовательного контента выявляет несколько ключевых тенденций и ограничений. Большинство рассмотренных платформ демонстрируют успешную реализацию базовой функциональности поиска и категоризации курсов, однако сталкиваются с серьезными ограничениями в плане полноты охвата образовательного рынка и глубины анализа предложений.
     Общей проблемой является недостаточная интеграция с международными образовательными ресурсами, что ограничивает возможности пользователей в доступе к качественным образовательным программам ведущих мировых университетов и специализированных центров. Локальная ориентация большинства агрегаторов, с одной стороны, соответствует потребностям российской аудитории в адаптированном контенте, но с другой - создает искусственные барьеры для глобального образовательного взаимодействия.
     Техническая реализация существующих решений характеризуется преимущественно статичными подходами к представлению информации с ограниченными возможностями персонализации и интеллектуального анализа пользовательских предпочтений. Отсутствие развитых рекомендательных систем и адаптивных интерфейсов снижает эффективность использования платформ для решения сложных образовательных задач.
     Выявленные ограничения создают возможности для разработки более совершенного решения, которое должно объединить лучшие практики существующих платформ с инновационными подходами к агрегации и анализу образовательного контента. Такое решение должно обеспечить баланс между локализацией для российской аудитории и интеграцией с глобальными образовательными ресурсами, предоставляя пользователям максимально полную картину доступных образовательных возможностей.
     

     ГЛАВА 2. ПРОЕКТИРОВАНИЕ СИСТЕМЫ
     2.1 Архитектура системы
     Для ИС были разработаны требования функционального и нефункционального характера. Требования функционального характера включают в себя бизнес-требования и функциональные требования, в то время как требования нефункционального характера охватывают требования к производительности, требования к безопасности, требования к восстановлению и требования к расширяемости.
     Функциональные требования определяют, что система должна делать, описывая основные функции, бизнес-правила и пользовательские взаимодействия. Эти требования необходимы для обеспечения того, что ИС будет соответствовать ожиданиям пользователей и бизнес-целям университета, обеспечивая корректное выполнение всех предусмотренных операций.
     Нефункциональные требования, с другой стороны, задают критерии качества и другие аспекты, не связанные напрямую с функциональностью системы, но критически важные для её эффективного использования. Требования к производительности определяют, насколько быстро система должна выполнять операции, обеспечивая приемлемое время отклика и пропускную способность. Требования к безопасности устанавливают меры для защиты данных и предотвращения несанкционированного доступа, гарантируя конфиденциальность, целостность и доступность информации. Требования к восстановлению описывают процедуры и условия для восстановления системы после сбоев, минимизируя время простоя и потери данных. Наконец, требования к расширяемости определяют способность системы адаптироваться к изменениям и увеличению нагрузки без существенных изменений в архитектуре, обеспечивая долгосрочную устойчивость и гибкость.
     
     
     2.2 Требования функционального характера
     Бизнесс требования:
* Обеспечить пользователю простой инструмент для выбора курса по нраву.
* Предоставить платформам, с которых мы берем данные, приток дополнительных клиентов путем выбора их курсов через наш агрегатор.
     Функциональные требования
* Система должна осуществлять сбор данных о курсах с различных платформ.
* Система должна хранить данные о курсах, включая название, рейтинг, описание, цену, источник и ссылку.
* Система должна обеспечивать поиск курсов по различным критериям (название, категория, платформа и другие).
* Система должна давать доступ к фильтрации курсов по таким параметрам как: цена, рейтинг.
* Сортировка курсов по цене. 
* Отображение подробной информации о курсе. 
* Регистрация и авторизация пользователей. 
* Ведение личного кабинета пользователя. 
* Добавление курсов в избранное.
     
     2.2.1 Диаграмма активности
     Для наглядного представления основных процессов в системе была разработана диаграмма активности, которая отражает ключевые потоки действий пользователей и администраторов.

Рис 1. - Диаграмма активности системы

     Диаграмма активности демонстрирует пять основных состояний системы:

     1. Главная страница
     Начальное состояние системы, где пользователь может просматривать каталог курсов, осуществлять поиск и переходить к детальному просмотру выбранного курса. Здесь реализован базовый функционал навигации по образовательному контенту.

     2. Работа с избранным
     Этот поток действий включает проверку авторизации пользователя перед добавлением курса в избранное. Если пользователь не авторизован, система перенаправляет его на форму входа. После успешной авторизации пользователь может добавлять курсы в свой список избранного.

     3. Поиск и фильтрация
     Процесс поиска курсов включает несколько последовательных шагов: ввод поискового запроса, применение фильтров (по цене, рейтингу, платформе), сортировку результатов и их отображение. Пользователь может итеративно уточнять параметры поиска для получения наиболее релевантных результатов.

     4. Детальная страница курса
     При переходе к конкретному курсу система загружает подробную информацию и отображает её пользователю. С этой страницы можно либо перейти непосредственно к курсу на платформе-источнике, либо добавить его в избранное.

     5. Административная панель
     Отдельный поток действий для администраторов системы, где после проверки прав доступа становится доступным управление парсерами. Администраторы могут запускать процессы обновления базы данных курсов, контролируя актуальность информации в системе.

     Каждое состояние имеет свои внутренние переходы и действия, а также связи с другими состояниями, что обеспечивает целостность пользовательского опыта и административных функций. Диаграмма наглядно показывает, как различные компоненты системы взаимодействуют между собой и какие действия доступны пользователям на каждом этапе работы с агрегатором.

     2.3 Требования нефункционального характера. Требования к производительности
     Эффективность работы информационной системы агрегации образовательных курсов напрямую влияет на пользовательский опыт и определяет успешность практического применения разрабатываемого решения. Временные характеристики отклика системы должны соответствовать современным стандартам веб-приложений, обеспечивая комфортное взаимодействие пользователей с интерфейсом.
     Система должна демонстрировать стабильное время отклика при обработке пользовательских запросов, не превышающее трех секунд для операций поиска и фильтрации курсов в базе данных объемом до десяти тысяч записей. При увеличении объема данных до пятидесяти тысяч записей допустимое время отклика может возрастать до пяти секунд. Загрузка главной страницы с каталогом курсов должна происходить не более чем за 1.5 секунды при стандартном интернет-соединении со скоростью 10 Мбит/с.
     Производительность парсинга и обновления данных о курсах составляет критический аспект функционирования системы. Система должна поддерживать параллельную обработку данных от различных источников с использованием не более 70% доступных ресурсов сервера.
     Масштабируемость системы предполагает способность обслуживать одновременные запросы множества пользователей без критического снижения быстродействия. Архитектура должна гарантировать стабильную работу при одновременном подключении минимум пятидесяти активных пользователей, выполняющих различные операции поиска, просмотра и сравнения образовательных программ. При пиковых нагрузках до ста пользователей время отклика может увеличиваться не более чем на 30% от базовых значений. Потребление оперативной памяти не должно превышать 4 ГБ при максимальной загрузке системы. 
     2.3.1 Требования к безопасности
     Защита информации в разрабатываемой системе требует комплексного подхода к обеспечению конфиденциальности, целостности и доступности данных. Все коммуникации между компонентами системы должны осуществляться через защищенные каналы связи с применением современных криптографических протоколов.
     Аутентификация пользователей должна базироваться на надежных механизмах верификации личности, включающих проверку учетных данных и контроль сессий. Система ролевого доступа должна обеспечивать дифференцированные права пользователей в зависимости от их статуса и функциональных обязанностей, предотвращая несанкционированный доступ к критически важной информации.
     Архитектурное решение предполагает размещение всех компонентов системы в контролируемой инфраструктуре с ограниченным внешним доступом. Использование собственного хостинга обеспечивает полный контроль над безопасностью данных и исключает риски, связанные с использованием внешних облачных сервисов.
     Мониторинг безопасности должен включать регистрацию всех критически важных операций, попыток несанкционированного доступа и аномальной активности в системе. Регулярный анализ журналов безопасности позволит своевременно выявлять потенциальные угрозы и принимать соответствующие контрмеры.
     2.3.2 Требования к восстановлению
     Непрерывность работы информационной системы обеспечивается комплексом мер по резервному копированию и восстановлению данных. Стратегия резервирования должна учитывать критичность различных типов информации и обеспечивать возможность быстрого восстановления функциональности системы при возникновении сбоев.
     Еженедельное создание резервных копий всех критически важных данных гарантирует минимальные потери информации в случае технических неполадок или системных сбоев. Процедуры резервного копирования должны охватывать базу данных курсов, пользовательские профили, конфигурационные файлы и системные настройки.
     Механизмы автоматического восстановления должны обеспечивать быстрое возвращение системы к работоспособному состоянию с минимальным участием администраторов. Время восстановления критически важных функций не должно превышать четырех часов с момента обнаружения серьезного сбоя.
     Тестирование процедур восстановления должно проводиться регулярно для подтверждения работоспособности резервных копий и отработки алгоритмов восстановления. Документирование всех процедур обеспечивает возможность быстрого реагирования на чрезвычайные ситуации даже при отсутствии основных администраторов системы.
     2.3.1 Требования к расширяемости
     Долгосрочная устойчивость информационной системы обеспечивается гибкой архитектурой, способной адаптироваться к изменяющимся требованиям и растущим объемам данных. Модульное построение системы позволяет независимо развивать отдельные компоненты без нарушения работы других частей приложения.
     Интеграционные возможности системы должны предусматривать простое подключение новых источников данных о курсах без существенной переработки существующего кода. Стандартизированные интерфейсы взаимодействия между модулями обеспечивают возможность замены или модернизации отдельных компонентов системы.
     Масштабирование функциональности должно осуществляться путем добавления новых модулей и сервисов, не требуя кардинальной переработки базовой архитектуры. Такой подход минимизирует затраты на развитие системы и снижает риски внесения критических ошибок при модификации существующего функционала.
     Технологическая независимость отдельных компонентов позволяет использовать наиболее подходящие решения для конкретных задач, не ограничиваясь единой технологической платформой. Стандартизированные протоколы обмена данными между модулями обеспечивают совместимость различных технологических решений в рамках единой системы.
     2.4 Проектирование
     Этап проектирования системы потребовал создания визуальных схем архитектуры с применением стандартизированной нотации UML. Для разработки диаграмм был выбран веб-инструмент draw.io, который предоставляет необходимый набор элементов для моделирования информационных систем и обеспечивает удобство коллективной работы над проектом.
     2.4.1 Диаграмма последовательности действий
     Архитектура современного агрегатора образовательных курсов предполагает сложное взаимодействие между множеством компонентов cистемы, особенно при выполнении таких критически важных операций, как добавление курса в личный список избранных материалов пользователя.

Рис 1. - Диаграмма последовательности действий при добавлении курса в избранное
     Весь процесс инициируется в тот момент, когда пользователь обнаруживает интересующий его образовательный контент и принимает решение сохранить его для последующего изучения. Интерфейс, построенный на Vue.js, регистрирует действие пользователя и немедленно формирует HTTP-запрос методом POST к специализированному эндпоинту /api/favorites. В теле этого запроса передается уникальный идентификатор выбранного курса, что позволяет системе точно определить, какой именно образовательный материал должен быть добавлен в персональную коллекцию.
     Laravel Controller принимает входящий запрос и активирует метод addFavorite, который получает в качестве параметров идентификаторы как самого курса, так и текущего авторизованного пользователя. Контроллер выступает в роли координирующего элемента, не выполняя непосредственную обработку данных, а передавая управление специализированному сервисному слою системы.
     Сервисный компонент обрабатывает полученную информацию и инициирует создание новой записи через вызов метода create. Этот метод получает необходимые идентификаторы и передает их в Repository слой, который отвечает за все взаимодействия с хранилищем данных. Repository формирует соответствующий SQL-запрос INSERT INTO favorites и направляет его в базу данных для физического сохранения информации о новом элементе в избранном списке пользователя.
     База данных выполняет полученный запрос и генерирует подтверждение об успешном завершении операции. Это подтверждение проходит обратный маршрут через всю архитектуру приложения, последовательно возвращаясь от Repository к Service, затем к Controller, и в конечном итоге достигая пользовательского интерфейса. Vue.js получает ответ с HTTP-статусом 200 OK, содержащий данные с флагом favorite: true, что сигнализирует об успешном добавлении курса в избранное. Интерфейс обновляется соответствующим образом, визуально подтверждая пользователю выполнение его действия.

Рис 2. - Диаграмма последовательности действий процесса авторизации пользователя
     Процедура авторизации пользователя представляет собой еще более комплексную последовательность операций, требующую дополнительных мер безопасности. Когда пользователь заполняет форму входа в систему, вводя свой адрес электронной почты и пароль, Vue.js формирует POST-запрос к эндпоинту /api/login, включая учетные данные в тело запроса.
     Laravel Controller получает запрос на аутентификацию и вызывает метод authenticate, передавая ему предоставленные пользователем данные. Сервисный слой начинает процесс верификации, обращаясь к Repository с запросом findByEmail для поиска соответствующей записи пользователя в базе данных. Repository выполняет SQL-запрос SELECT, используя предоставленный адрес электронной почты в качестве критерия поиска.
     Полученная информация о пользователе возвращается в Service в виде объекта userEntity, после чего начинается критически важный этап верификации пароля. Метод verifyPassword сравнивает введенный пользователем пароль с хешированным паролем, сохраненным в базе данных, используя криптографические алгоритмы для обеспечения безопасности.
     При успешной верификации система активирует JWT Service, который генерирует безопасный токен аутентификации. Этот токен содержит зашифрованную информацию о пользователе и имеет ограниченный срок действия, что повышает общий уровень безопасности системы. Сгенерированный JWT-токен возвращается через всю цепочку компонентов обратно к пользовательскому интерфейсу.
     Vue.js получает ответ со статусом 200 OK, содержащий токен и дополнительные пользовательские данные. Фронтенд сохраняет этот токен в безопасном хранилище браузера для использования в последующих запросах к API, что позволяет пользователю оставаться авторизованным на протяжении всей рабочей сессии без необходимости повторного ввода учетных данных.
     Подобная многоуровневая архитектура обеспечивает не только высокую степень безопасности и надежности платформы агрегатора курсов, но также гарантирует масштабируемость системы и возможность эффективной обработки большого количества одновременных пользовательских запросов. Каждый компонент выполняет свою специализированную функцию, что упрощает сопровождение кода и позволяет легко вносить изменения в отдельные части системы без воздействия на остальную архитектуру.
     2.4.2 Диаграмма развертывания
     На рисунке 3 отображена диаграмма развертывания ИС.
     
Рис 3. - Диаграмма развертывания
     Архитектура развертывания системы агрегатора курсов построена на основе классического подхода с использованием локальной среды разработки XAMPP. Данное решение обеспечивает простоту развертывания и сопровождения системы при сохранении всех необходимых функциональных возможностей.
     Клиентская часть системы представлена веб-браузерами пользователей, которые загружают и исполняют гибридное приложение, построенное на Laravel с интегрированными Vue.js компонентами. Браузер взаимодействует с сервером через стандартные HTTP/HTTPS запросы, получая как статические ресурсы, так и динамический контент, генерируемый серверной частью.
     Серверная инфраструктура базируется на XAMPP платформе, которая объединяет все необходимые компоненты в единой среде выполнения. Apache веб-сервер выступает в качестве основного обработчика входящих запросов, обеспечивая обслуживание статических файлов и перенаправление динамических запросов к PHP-интерпретатору для дальнейшей обработки.
     PHP-интерпретатор исполняет код Laravel фреймворка, который содержит всю бизнес-логику приложения. Фреймворк обрабатывает маршрутизацию запросов, выполняет аутентификацию пользователей, управляет сессиями и координирует взаимодействие с базой данных через встроенный ORM Eloquent. Vue.js компоненты интегрированы непосредственно в Blade-шаблоны Laravel, что обеспечивает реактивность пользовательского интерфейса.
     MySQL база данных функционирует как встроенный компонент XAMPP и хранит всю информацию системы, включая данные пользователей, каталог курсов, избранные элементы и системные настройки. Взаимодействие с базой данных осуществляется через REST API эндпоинты, которые инкапсулируют все операции создания, чтения, обновления и удаления данных.

Рис 4. - Диаграмма модели данных (ER)
     PhpMyAdmin предоставляет веб-интерфейс для администрирования базы данных, позволяя разработчикам и администраторам управлять структурой таблиц, просматривать данные, выполнять SQL-запросы и осуществлять резервное копирование. Этот инструмент особенно полезен на этапе разработки и отладки системы.
     REST API реализован как набор контроллеров Laravel, которые обрабатывают HTTP-запросы различных типов и возвращают данные в формате JSON. Фронтенд взаимодействует с API через AJAX-запросы, отправляя данные форм и получая актуальную информацию для обновления пользовательского интерфейса без полной перезагрузки страницы.
     Данная архитектура развертывания обеспечивает все необходимые функции для работы агрегатора курсов при минимальных требованиях к инфраструктуре. XAMPP предоставляет интегрированную среду, которая значительно упрощает процесс установки и настройки всех компонентов системы.
     Взаимодействие между компонентами происходит следующим образом: пользователь через браузер отправляет запросы к Apache серверу, который передает их PHP интерпретатору для обработки Laravel фреймворком. REST API контроллеры выполняют необходимые операции с MySQL базой данных и возвращают результаты в формате JSON обратно к клиентскому приложению.
     Такая простая, но эффективная архитектура позволяет быстро разрабатывать и тестировать функциональность системы, а при необходимости легко мигрировать на более производительную инфраструктуру без существенных изменений в коде приложения.
     2.4.3 Диаграмма прецедентов
     Для комплексного понимания функциональных возможностей разрабатываемой системы агрегации образовательных курсов была создана диаграмма прецедентов, которая наглядно демонстрирует взаимодействие различных категорий пользователей с ключевыми функциями приложения. Данная диаграмма служит основой для понимания ролевой модели доступа и детализирует спектр операций, доступных каждому типу участников системы.
     

Рис 5. - Диаграмма прецендентов
     Архитектура системы предусматривает три основные категории участников, каждая из которых обладает специфическим набором прав и возможностей. Неавторизованные посетители, обозначенные в системе как "Гость", представляют наиболее многочисленную группу пользователей, которые впервые знакомятся с возможностями платформы или используют её эпизодически. Эта категория участников имеет доступ к базовому функционалу просмотра и поиска образовательного контента без необходимости создания персонального аккаунта.
     Гостевой доступ обеспечивает возможность осуществления поиска курсов по различным критериям, включая название программы, тематическую направленность, стоимость обучения и рейтинговые показатели. Алгоритмы поиска реализованы таким образом, чтобы предоставить максимально релевантные результаты даже при использовании общих запросов или неполных ключевых слов. Система автоматически предлагает варианты исправления орфографических ошибок и синонимичные термины для расширения результатов поиска.
     Детальный просмотр информации о конкретном образовательном курсе составляет ещё одну важную функцию, доступную неавторизованным пользователям. При выборе интересующей программы система отображает исчерпывающие сведения о содержании курса, включая структуру учебного плана, информацию о преподавателях, продолжительность обучения, форматы проведения занятий и методы оценки знаний. Дополнительно предоставляются данные о стоимости участия, доступных способах оплаты и особых условиях для различных категорий слушателей.
     Функциональность просмотра общего каталога курсов позволяет гостям системы ознакомиться с полным спектром доступных образовательных программ, представленных на агрегаторе. Каталог структурирован по тематическим разделам и предоставляет возможности сортировки по различным параметрам, таким как популярность, дата добавления, стоимость или продолжительность обучения. Интуитивно понятная навигация обеспечивает быстрое перемещение между категориями и эффективный поиск нужной информации.
     Зарегистрированные пользователи получают доступ ко всем функциям гостевого режима плюс расширенному набору персонализированных возможностей. Процедура регистрации в системе разработана с учётом принципов удобства использования и безопасности данных. Новые участники заполняют минимальный набор обязательных полей, включающий адрес электронной почты, пароль и базовую контактную информацию.
     Авторизационный механизм обеспечивает безопасный вход зарегистрированных пользователей в систему с использованием современных протоколов шифрования. После успешной аутентификации участники получают доступ к персональному кабинету, где могут управлять своим профилем, просматривать историю активности и настраивать индивидуальные предпочтения для получения рекомендаций.
     Ключевой особенностью функционала для авторизованных пользователей является возможность формирования персональной коллекции избранных курсов. Механизм добавления программ в избранное реализован через интуитивно понятный интерфейс, позволяющий отмечать интересующие курсы одним нажатием кнопки. Система сохраняет информацию о выбранных программах в персональном профиле пользователя, обеспечивая быстрый доступ к ним при последующих посещениях платформы.
     Просмотр персонального списка избранных курсов предоставляет пользователям удобный инструмент для планирования образовательной траектории. В этом разделе отображается вся информация о сохранённых программах с возможностью сравнения характеристик, отслеживания изменений стоимости и получения уведомлений о специальных предложениях или скидках.
     Функция удаления курсов из избранного обеспечивает гибкость управления персональной коллекцией. Пользователи могут легко корректировать свой список, удаляя программы, которые больше не представляют интереса, или заменяя их более актуальными альтернативами. Система предусматривает подтверждение операций удаления для предотвращения случайных действий.
     Процедура выхода из системы реализована с соблюдением всех требований безопасности, включая полную очистку сессионных данных и отзыв токенов аутентификации. Это обеспечивает защиту персональной информации пользователей, особенно при работе с общедоступными компьютерами или мобильными устройствами.
     Административная роль в системе предназначена для технических специалистов и менеджеров, ответственных за поддержание актуальности и качества образовательного контента. Администраторы обладают расширенными правами доступа ко всем функциям системы, включая специализированные инструменты управления данными и конфигурацией платформы.
     Функция запуска обновления данных о курсах представляет критически важный аспект администрирования системы. Этот процесс включает активацию механизмов парсинга информации с партнёрских образовательных платформ, валидацию полученных данных на предмет корректности и актуальности, а также интеграцию новой информации в общую базу данных агрегатора. Администраторы могут инициировать как полное обновление всего каталога, так и селективную актуализацию данных по отдельным категориям или источникам.
     Управление платформами-источниками данных охватывает широкий спектр операций по конфигурированию интеграционных модулей. Администраторы могут добавлять новые образовательные ресурсы в список партнёров, настраивать параметры парсинга для каждой платформы, корректировать алгоритмы обработки специфических форматов данных и отслеживать статистику успешности операций сбора информации.
     Функциональность управления пользователями предоставляет административному персоналу инструменты для модерации участников системы. Это включает возможности просмотра профилей пользователей, корректировки учётных записей при необходимости, блокирования подозрительных аккаунтов и ведения статистики активности участников платформы.
     Все перечисленные прецеденты использования тесно интегрированы между собой и формируют целостную экосистему агрегатора образовательных курсов. Диаграмма наглядно демонстрирует, как различные категории пользователей взаимодействуют с системой, какие функции им доступны и каким образом эти функции связаны между собой для обеспечения комплексного пользовательского опыта.
     Проектирование системы прецедентов учитывает принципы постепенного расширения функциональности. Неавторизованные пользователи имеют доступ к базовым возможностям, что позволяет им оценить ценность платформы без необходимости обязательной регистрации. В то же время, расширенные функции персонализации и управления мотивируют пользователей к созданию учётных записей для получения дополнительных преимуществ.
     Административный блок функций спроектирован таким образом, чтобы обеспечить эффективное управление системой без вмешательства в пользовательский опыт обычных участников. Разделение прав доступа гарантирует безопасность системы и предотвращает случайные или злонамеренные изменения критически важных данных неавторизованными лицами.
     2.4.4 Диаграмма классов
     Диаграмма прецедентов демонстрирует взаимодействие различных актёров с функциональными возможностями разрабатываемой системы агрегатора образовательных курсов. Данная диаграмма служит основой для понимания того, каким образом пользователи будут взаимодействовать с системой и какие задачи они смогут решать с её помощью.
     Основным актёром системы выступает обычный пользователь, который представляет собой широкую категорию людей, заинтересованных в поиске и изучении онлайн-курсов. Этот актёр обладает наиболее обширным набором возможностей для взаимодействия с платформой. Пользователь может осуществлять поиск образовательных материалов по различным критериям, что является одной из ключевых функций агрегатора. Процесс поиска предполагает возможность ввода ключевых слов, выбора категорий обучения, указания ценового диапазона и других параметров, которые помогут найти наиболее подходящие курсы.
     Функционал просмотра каталога курсов позволяет пользователю ознакомиться с полным перечнем доступных образовательных программ, представленных на различных платформах. Каталог структурирован таким образом, чтобы обеспечить удобную навигацию и быстрый доступ к интересующей информации. Каждый курс в каталоге содержит основные сведения, такие как название, краткое описание, рейтинг, стоимость и платформа-источник.
     Детальный просмотр информации о конкретном курсе представляет собой расширенную функцию, которая предоставляет пользователю исчерпывающие данные об образовательной программе. Эта информация включает подробное описание содержания курса, информацию о преподавателях, продолжительность обучения, требования к предварительной подготовке, отзывы других студентов и ссылку на оригинальную страницу курса на платформе-источнике.
     Система фильтрации и сортировки курсов обеспечивает гибкие возможности для настройки отображения результатов поиска. Пользователь может применять различные фильтры одновременно, создавая комбинации критериев, которые наилучшим образом соответствуют его потребностям. Сортировка может осуществляться по релевантности, цене, рейтингу, дате создания или обновления курса.
     Для пользователей, которые желают сохранить понравившиеся курсы для последующего изучения, система предлагает функцию добавления в избранное. Этот механизм позволяет создать персональную коллекцию образовательных материалов, к которой можно быстро получить доступ в любое время. Управление избранным включает не только добавление курсов, но и их удаление, а также организацию по категориям или приоритетам.
     Процессы регистрации и авторизации обеспечивают создание персонального профиля пользователя и безопасный доступ к расширенным функциям системы. Регистрация предполагает создание учётной записи с указанием базовой информации, такой как имя, адрес электронной почты и пароль. Авторизация позволяет существующим пользователям войти в систему и получить доступ к своим персональным данным и настройкам.

Рис 6. - Диаграмма классов
     Управление личным кабинетом представляет собой комплексную функцию, которая включает возможность редактирования профильной информации, просмотра истории активности, настройки уведомлений и предпочтений. Личный кабинет служит центральным местом для управления всеми аспектами взаимодействия пользователя с платформой.
     Дополнительным актёром системы является администратор, который обладает расширенными правами для управления содержимым платформы и её техническим состоянием. Администратор может выполнять операции по модерации контента, управлению пользователями, мониторингу производительности системы и внесению изменений в конфигурацию.
     Прецедент обновления базы данных курсов является критически важным для поддержания актуальности информации в системе. Этот процесс может запускаться как автоматически по расписанию, так и вручную администратором. Обновление включает в себя сбор новых данных с образовательных платформ, проверку изменений в существующих курсах и удаление неактуальной информации.
     Функция управления парсерами обеспечивает контроль над процессами автоматического сбора данных с различных образовательных платформ. Администратор может настраивать параметры парсинга, добавлять новые источники данных, исключать определённые платформы из процесса сбора информации и мониторить эффективность работы каждого парсера.
     Система аналитики и отчётности предоставляет администратору детальную информацию о функционировании платформы. Это включает статистику посещений, популярность различных курсов и категорий, эффективность поисковых запросов, активность пользователей и другие ключевые показатели, которые помогают принимать обоснованные решения по развитию системы.
     Прецедент технического обслуживания системы охватывает широкий спектр административных задач, включая резервное копирование данных, обновление программного обеспечения, мониторинг безопасности и оптимизацию производительности. Эти операции критически важны для обеспечения стабильной и надёжной работы платформы.
     Взаимосвязи между прецедентами отражают логическую последовательность и зависимости различных операций. Например, для добавления курса в избранное пользователь должен быть авторизован в системе, что создаёт связь типа "включает" между соответствующими прецедентами. Аналогично, функция поиска может расширяться дополнительными возможностями фильтрации и сортировки.
     Данная диаграмма прецедентов служит основой для последующей детализации требований к системе и проектирования пользовательских интерфейсов. Она обеспечивает понимание полного спектра функциональности, которая должна быть реализована в системе агрегатора образовательных курсов для удовлетворения потребностей всех категорий пользователей.
     ГЛАВА 3. РЕАЛИЗАЦИЯ СИСТЕМЫ
     Реализация информационной системы агрегации образовательных курсов представляет собой комплексный процесс, охватывающий множество аспектов разработки современного веб-приложения. В данной главе подробно рассматриваются технические решения, использованные при создании системы, особености реализации различных компонентов и их взаимодействие между собой.
     Архитектура системы построена на принципах модульности и масштабируемости, что позволяет легко расширять функциональность и поддерживать растущую базу пользователей. Каждый компонент системы разработан с учетом современных практик программирования и оптимизирован для максимальной производительности. В основе архитектурного решения лежит концепция разделения ответствености, где каждый модуль выполняет строго определенные функции и взаимодействует с другими компонентами через четко определенные интерфейсы.
     Особое внимание при разработке было уделено пользовательскому опыту. Интерфейс системы спроектирован таким образом, чтобы обеспечить интуитивно понятную навигацию и быстрый доступ к основным функциям. Использование современных технологий фронтенд-разработки позволило создать отзывчивый и динамичный интерфейс, который одинаково эффективно работает как на десктопных, так и на мобильных устройствах.
     3.1 Используемые технологии
     В процесе разработки агрегатора образовательных курсов ключевым этапом стал выбор технологического стека. После тщательного анализа существующих решений предпочтение было отдано комбинации Laravel/Vue в сочетании с локальной средой разработки XAMPP. Данный выбор обусловлен необходимостью создания надежного и масштабируемого приложения с удобным процесом разработки и отладки.
     XAMPP представляет собой интегрированый пакет программного обеспечения, который включает в себя все необходимые компоненты для локальной разработки. В его состав входит веб-сервер Apache версии 2.4.56, обеспечивающий обработку HTTP-запросов и маршрутизацию. Серверная часть функционирует на PHP версии 8.0.30, что позволяет использовать современные возможности языка. Система управления базами данных MySQL версии 8.0.31 отвечает за хранение и управление данными приложения. Для удобного администрирования базы данных используется phpMyAdmin версии 5.2.1.
     
Рис 5. - Панель управления XAMPP с запущенными сервисами
     В качестве основного фреймворка для разработки серверной части приложения был выбран Laravel версии 9.x. Данный фреймворк предоставляет разработчикам элегантный синтаксис и современную архитектуру, построеную на принципах Model-View-Controller. Встроенная система миграций значительно упрощает процесс управления структурой базы данных, позволяя версионировать изменения и поддерживать согласованность между средами разработки. Фреймворк включает в себя мощную систему объектно-реляционного отображения Eloquent, которая существенно упрощает взаимодействие с базой данных через удобный программный интерфейс.

Рис 6. - Структуры проекта в IDE с основными директориями laravel
     Vue.js 3 предлагает революционный подход к разработке через Composition API, который кординально меняет способ организации логики компонентов. В отличии от традиционного Options API, новый подход позволяет группировать связанный код вместе, что существенно улутшает читаемость и поддерживаемость кодовой базы. Рассмотрим пример использования Composition API в компоненте поиска курсов

Рис 7. - Пример использования Composition API в компоненте поиска курсов
     Для управления состоянием приложения применяется современное решение Pinia, пришедшее на смену классическому Vuex. Pinia предоставляет более простой и интуитивный способ работы с глобальным состоянием, поддерживает TypeScript из коробки и обладает встроенными инструментами отладки. Архитектура хранилища данных разделена на модули, каждый из которых отвечает за определенную область функциональности:
     - Модуль аутентификации (auth store)
     - Модуль управления курсами (courses store)
     - Модуль пользовательских настроек (settings store)
     Для хранения данных используется MySQL версии 8.0.31, предоставляемая в составе XAMPP. Выбор данной СУБД обусловлен её высокой производительностью и надежностью при работе с большими объемами данных. Поддержка транзакций и внешних ключей обеспечивает целостность данных, а встроенные механизмы полнотекстового поиска позволяют эффективно искать информацию по содержимому курсов. Наличие механизмов репликации предоставляет возможность масштабирования системы в будущем.
     Взаимодействие с базой данных осуществляется через несколько уровней абстракции. Eloquent ORM предоставляет объектно-ориентированный интерфейс для работы с таблицами базы данных, представляя их в виде моделей. Query Builder используется для конструирования сложных SQL-запросов с помощью цепочек методов. Система миграций позволяет версионировать изменения структуры базы данных, а механизм сидеров обеспечивает наполнение базы тестовыми данными для разработки и тестирования.
     Маршрутизация в приложении реализована с помощью Vue Router, который обеспечивает навигацию между различными представлениями. Особое внимание уделено защите маршрутов и обработке пользовательских прав доступа. Реализована система middleware для проверки аутентификации пользователя перед доступом к защищенным маршрутам.
     Особое внимание уделено компонентам системы, отвечающим за парсинг образовательных платформ. Для выполнения HTTP-запросов используется библиотека Guzzle версии 7.0, которая предоставляет удобный интерфейс для работы с внешними API и веб-страницами. Анализ HTML-структуры выполняется с помощью Symfony DomCrawler, а для более глубокой работы с DOM-деревом применяется PHP Simple HTML DOM Parser. Управление длительными процессами парсинга осуществляется через компонент Symfony Process.
     3.2 Реализация бекенд части
     Серверная часть приложения реализована на базе фреймворка Laravel, что обеспечивает надежную основу для разработки масштабируемых веб-приложений. Бэкенд система построена с использованием архитектурного паттерна MVC (Model-View-Controller), который обеспечивает четкое разделение бизнес-логики, представления данных и управляющей логики.
     Центральным элементом бэкенд архитектуры является система моделей, представляющих основные сущности приложения. Модель Course описывает структуру данных образовательного курса и включает такие атрибуты как название, описание, стоимость, продолжительность и рейтинг. Модель Platform представляет образовательные платформы, с которых агрегируются курсы. User модель реализует функционал управления пользовательскими данными, включая механизмы аутентификации и авторизации.

Рис 9. - Описание модели курса
     Контроллеры, расположенные в директории app/Controllers/API, обеспечивают обработку HTTP-запросов и формирование ответов. CourseController управляет операциями с курсами, включая их поиск, фильтрацию и детальный просмотр. PlatformController отвечает за управление информацией об образовательных платформах. CategoryController обеспечивает работу с категориями курсов. UserController реализует функционал управления пользовательскими данными. FavoriteController отвечает за операции с избранными курсами, а AuthController обеспечивает процессы аутентификации и авторизации.
     3.3 Реализация парсеров
     Для получения данных о курсах с различных образовательных платформ были разработаны специализированые парсеры. Каждый парсер учитывает особенности структуры и организации контента соответсвующей платформы. В основе архитектуры парсеров лежит абстрактный базовый класс BaseParser, который предоставляет общий функционал для работы с HTTP-запросами, обработки ошибок и логирования.
     Система парсинга образовательных курсов представляет собой комплекс специализированных модулей, каждый из которых оптимизирован для работы с конкретной образовательной платформой. Архитектура парсеров построена на принципах расширяемости, что позволяет легко добавлять поддержку новых источников данных.
     3.3.1 Парсер Stepik
     Парсер платформы Stepik реализован с использованием официального API Stepik, что обеспечивает стабильный и надежный доступ к данным о курсах. Модуль выполняет пагинированные запросы к API для получения актуальной информации о доступных курсах. Особое внимание уделено обработке ошибок и повторным попыткам при сбоях сети.
     Особое внимание уделено фильтрации неактуальных и тестовых курсов. Реализована система проверки качества контента, которая анализирует наполненность основных полей курса и количество обучающихся. Это позволяет исключить из выдачи "курсы-заглушки" и обеспечить пользователей только качественным образовательным контентом.
     3.3.2 Парсер SkillBox
     В реализации парсера Skillbox особого внимания заслуживает функция getCourseUrlsFromCategories. Данная функция выполняет навигацию по дереву категорий образовательной платформы, начиная с корневых разделов, и рекурсивно обходит все подкатегории. Для каждой категории извлекаются ссылки на курсы с использованием CSS-селекторов, учитывающих особенности вёрстки платформы.
     Интересным техническим решением является реализация обхода защиты от автоматизированных запросов. Разработан механизм ротации User-Agent заголовков и динамических пауз между запросами. Интервалы между запросами вычисляются по формуле, учитывающей текущее время суток и день недели, что делает поведение парсера более похожим на действия реального пользователя.
     Функция getCourseUrlsFromXmlSitemap дополняет основной механизм сбора данных, анализируя карту сайта в формате XML. Особенностью реализации является потоковая обработка XML-документа, что позволяет эффективно работать с картами сайта большого размера без загрузки всего документа в память. Функция также выполняет валидацию обнаруженных URL и отфильтровывает ссылки, не соответствующие шаблону страниц курсов.
     3.3.3 Парсер GeekBrains
     В реализации парсера Geekbrains особый интерес представляет функция extractPrice, которая анализирует различные модели монетизации курсов. Функция корректно обрабатывает как разовые платежи, так и подписочные модели, приводя их к унифицированному формату для сравнения стоимости обучения между платформами.
     Заслуживает внимания реализация механизма определения актуальности курсов. Разработан алгоритм, который анализирует несколько параметров: дату последнего обновления материалов, активность в обсуждениях, количество новых студентов за последний месяц. На основе этих данных принимается решение о включении курса в агрегатор или его пометке как архивного.
     Отдельного упоминания заслуживает система кэширования промежуточных результатов парсинга. Реализован механизм инкрементального обновления данных, который позволяет возобновлять процесс парсинга с места остановки в случае сбоев. Это особенно важно при работе с большим каталогом курсов, где полное повторение процесса парсинга может занять значительное время.
     3.4 РЕАЛИЗАЦИЯ ФРОНТЕНД ЧАСТИ
     Клиентская часть приложения разработана с использованием Vue.js 3 и Composition API, что обеспечивает создание интерактивного и отзывчивого пользовательского интерфейса. Архитектура фронтенда построена на компонентном подходе, где каждый элемент интерфейса представляет собой независимый компонент с собственной логикой и стилями.
     
Рис 10. - Главная страница
     Центральным элементом пользовательского взаимодействия является страница поиска курсов (SearchPage), реализованная с использованием передовых практик оптимизации производительности. Внедрен механизм дебаунсинга для предотвращения избыточных запросов к серверу при вводе поискового запроса. Система фильтрации курсов поддерживает множественные критерии:
     
Рис 10. - Страница поиска курсов
     Каждый курс представлен в виде карточки, содержащей ключевую информацию:
     
Рис 11. - Карточка курса
     Основные компоненты включают:
     CourseList - компонент для отображения списка курсов с возможностью фильтрации и сортировки. Реализована виртуализация списка для эффективной работы с большими наборами данных.
     CourseCard - представляет карточку курса с основной информацией и элементами управления. Оптимизирован для различных размеров экрана.
     FilterPanel - панель фильтров, позволяющая пользователям настраивать параметры поиска курсов. Реализована с поддержкой множественного выбора и сохранения состояния фильтров.
     SearchBar - компонент поиска с автодополнением и подсветкой результатов. Использует дебаунсинг для оптимизации запросов к серверу.
     Система аутентификации построена на основе JWT-токенов с реализацией механизма автоматического обновления при истечении срока действия. Пользовательские данные безопасно хранятся в локальном хранилище браузера с использованием шифрования чувствительной информации. Процесс авторизации включает многоступенчатую валидацию:
     
Рис 12. - Форма регистрации
     Профиль пользователя реализован как отдельный модуль с собственным состоянием и набором компонентов. Внедрена система управления персональными настройками, включая возможность изменения пароля
     . Особое внимание уделено обработке ошибок и предоставлению понятной обратной связи:
     Для работы с внешними API создан специализированный сервисный слой, который инкапсулирует всю логику взаимодействия с бэкендом. Реализован механизм перехвата ошибок с автоматической обработкой типовых ситуаций, таких как истечение сессии или проблемы с сетевым подключением. Все запросы к серверу выполняются через единый интерфейс:
     
Рис 13. - HTTP-service 
     Визуальный стиль приложения основан на принципах материального дизайна с адаптацией под специфику образовательной платформы. Разработана система компонентов, обеспечивающая единообразие интерфейса и простоту поддержки. Все интерактивные элементы снабжены анимациями для улучшения пользовательского опыта:
     Главная страница приложения реализована с использованием модульной структуры, что позволяет гибко управлять отображаемым контентом. Внедрена система динамических секций, включающая блоки популярных курсов, рекомендаций на основе предпочтений пользователя и новых поступлений. Каждая секция представляет собой независимый компонент с собственной логикой загрузки и обновления данных.
     Реализована система уведомлений, которая информирует пользователей о важных событиях: появлении новых курсов, изменении цен, начале акций или специальных предложений. Уведомления реализованы как отдельный сервис, интегрированный с основным приложением через систему событий. Предусмотрена возможность настройки типов получаемых уведомлений и их частоты.
     Для обеспечения высокой производительности приложения внедрен механизм кэширования данных на клиентской стороне. Используется комбинация различных стратегий кэширования: в памяти браузера для часто используемых данных, в локальном хранилище для персональных настроек и в IndexedDB для больших наборов данных. Реализована система инвалидации кэша при обновлении данных:
     Особое внимание уделено обработке ошибок и предоставлению информативной обратной связи пользователю. Разработана система перехвата и обработки исключений, которая обеспечивает корректное отображение ошибок в пользовательском интерфейсе. Все сообщения об ошибках локализованы и содержат понятные инструкции по решению возникших проблем.
     
Рис 14. - Сообщение об ошибке
     ГЛАВА 4. ТЕСТИРОВАНИЕ СИСТЕМЫ
     В процесе разработки информационной системы агрегации образовательных курсов было проведено тестирование ключевых компонентов и функциональных возможностей. Основной целью тестирования являлась проверка работоспособности системы и соответствия заявленным требованиям. Тестирование проводилось в несколько этапов, начиная с модульного тестирования отдельных компонентов и заканчивая интеграционным тестированием всей системы в целом.
     4.1 Функциональное тестирование
     В рамках функционального тестирования был разработан чек-листы для проверки основных возможностей системы. Особое внимание уделялось пользовательскому интерфейсу и процесам взаимодействия пользователя с системой.
     Процесс создания новой учетной записи успешно проходит все этапы валидации данных. Система корректно обрабатывает различные сценарии ввода, включая попытки регистрации с уже существующим адресом электронной почты или некорректными данными.
     
Рис 15. - Неудачная регистрация
     Фильтрация курсов работает правильно, предоставляя релевантные результаты в соответствии с заданными критериями.
     
Рис 16. - Результат фильтрации курсов с релевантными значениями 
     4.2 Тестирование интерфейса
     Пользовательский интерфейс был протестирован в разных браузерах. Адаптивный дизайн корректно отображается.
     
Рис 17. - Результат тестирования в адаптивного интерфейса  
     Особое внимание было уделено проверке доступности интерфейса. Цветовая схема обеспечивает достаточный контраст для комфортного использования.
     4.3 Результаты тестирования
     По итогам проведенного тестирования можно сделать вывод о реализации системы. Все основные функциональные требования выполнены в полном объеме. Обнаруженные в процессе тестирования незначительные недочеты были успешно устранены.
     
Рис 18. - Чек листы 
     Стабильность работы и удобство использования позволяют говорить о достижении поставленных целей разработки.
Заключение
     В рамках выполненой работы была создана информационная система агрегации образовательных курсов, которая позволяет пользователям находить и сравнивать курсы с различных образовательных платформ. Разработаная система предоставляет удобный интерфейс для поиска и фильтрации курсов, а также возможность сохранения избранных материалов.
     В ходе ВКР Кутырин М. В. выполнил следующие задачи:
* Разработаны три парсера для трех платформ, каждый из которых подстраивается под нужную платформу для извлечения информации
* Создание базы данных
* Логика на бэкэнд части приложения
* Составление диаграмм
* Создание REST API для связи фронтэнд и бэкэнд частей приложения
* Запросы к получению информации с бэкэнда на фронтэнде
     В ходе ВКР Устинов А. П. выполнил следующие задачи:
* Созданы прототипы страниц
* Составление отчета, в том числе форматирование
* Составление диаграм
* Настройка части фронтэнда
* Логика на части фронтэнда приложения
     СПИСОК ЛИТЕРАТУРЫ
     1.    PHP: Руководство по PHP. [Электронный ресурс], 2025. Режим доступа: https://www.php.net/manual/ru/index.php (дата обращения: 01.06.2025);
     2.   Vue: Глоссарий. [Электронный ресурс], 2025. Режим доступа: https://ru.vuejs.org/glossary/ (дата обращения: 01.06.2025);
     3.          Laravel: Документация. [Электронный ресурс], 2025. Режим доступа: https://laravel.su/docs/11.x/documentation (дата обращения: 01.06.2025);
     24
     
     
     42
     
     
